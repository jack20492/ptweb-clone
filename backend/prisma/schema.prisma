// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  name           String
  role           String           @default("client")
  testimonials   Testimonial[]
  mealPlans      MealPlan[]
  workouts       Workout[]
  videos         Video[]
  images         Image[]
  settings       Settings?
  createdAt      DateTime         @default(now())
}
model MealPlan {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  title     String
  details   String
  date      DateTime
}
model Workout {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  name      String
  details   String
  videoId   Int? 
  video     Video? @relation(fields: [videoId], references: [id])
  date      DateTime
}
model Video {
  id        Int    @id @default(autoincrement())
  user      User?  @relation(fields: [userId], references: [id])
  userId    Int?
  title     String
  url       String
  uploadedAt DateTime @default(now())
  workouts  Workout[]
}
model Testimonial {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  createdAt DateTime @default(now())
}
model Content {
  id        Int    @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Image {
  id        Int    @id @default(autoincrement())
  url       String
  user      User?  @relation(fields: [userId], references: [id])
  userId    Int?
  uploadedAt DateTime @default(now())
}
model Settings {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id])
  userId    Int    @unique
  preferences String
}
